#########  Colon Data
colhist$Cage<-as.factor(colhist$Cage)
colhist_data.exp13<-colhist[grep("71.",colhist$Cage, value =F),]
#pulls out 2013 data
colhist_cage714<-grep("714",colhist_data.exp13$Cage, value=F)
colhist_dataNO714<-colhist_data.exp13[-c(colhist_cage714),  ]
#removed cage 714 as this cage cleared the infection and was not used for subsequent analysis
##### Ploting colon data from 2013 experiment
#edema for 2013 Mice
co.plot13_edema.dot<-ggplot(colhist_dataNO714, aes(x=Treatment_Grp, y=edema, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 1.1) +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.5, color="black") +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4))+
xlab(NULL)+
ylab("Edema")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
)
d1<-co.plot13_edema.dot
##inflammation
co.plot13_inflammation.dot<-ggplot(colhist_dataNO714, aes(x=Treatment_Grp, y=inflammation, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.1) +
scale_color_manual(values = rep("black",4)) +
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.6, color="black") +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4)) +
ylab("Inflammation")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
)
d2<-co.plot13_inflammation.dot
##epithelial_damage
co.plot13_epithelial_damage.dot<-ggplot(colhist_dataNO714, aes(x=Treatment_Grp, y=epithelial_damage, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.1) +
scale_color_manual(values = rep("black",4)) +
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.5, color="black") +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4)) +
ylab("Epithelial Damage")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
)
d3<-co.plot13_epithelial_damage.dot
#This plot shows the sumary score for the colon of the 2013 Wildtype mice at time of harvest.
co.plot13_sum.dot<-ggplot(colhist_dataNO714, aes(x=Treatment_Grp, y=summary_score, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=3) +
scale_color_manual(values = rep("black",4)) +
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.6, color="black") +
scale_y_continuous(breaks= c(0, 2, 4, 6, 8, 10, 12),  limits = c(0, 12)) +
ylab("Summary Score")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1.5)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=11)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
)
d4<-co.plot13_sum.dot
###Wilcox test
six30_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== '630_VPI', ]
six30_VPI.hist<-six30_VPI$summary_score
naive_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.hist<-naive_VPI$summary_score
wilcox.test(naive_VPI.hist,six30_VPI.hist)
#data:  naive_VPI.hist and six30_VPI.hist
#W = 28, p-value = 0.008376
six30_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== '630_VPI', ]
six30_VPI.epi<-six30_VPI$epithelial_damage
naive_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.epi<-naive_VPI$epithelial_damage
wilcox.test(naive_VPI.epi,six30_VPI.epi)
#data:  naive_VPI.epi and six30_VPI.epi
#W = 27.5, p-value = 0.007066
six30_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== '630_VPI', ]
six30_VPI.inf<-six30_VPI$inflammation
naive_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.inf<-naive_VPI$inflammation
wilcox.test(naive_VPI.inf,six30_VPI.inf)
#data:  naive_VPI.inf and six30_VPI.inf
#W = 21, p-value = 0.1745
six30_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== '630_VPI', ]
six30_VPI.ed<-six30_VPI$edema
naive_VPI<-colhist_dataNO714[colhist_dataNO714$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.ed<-naive_VPI$edema
wilcox.test(naive_VPI.ed,six30_VPI.ed)
#data:  naive_VPI.ed and six30_VPI.ed
#W = 28, p-value = 0.007307
####Panel E
###Serum Anti-Toxin A IgG
iG<-read.table(file="/Users/Jhansi1/Desktop/Intraspecific_Competition/data/AntitoxnA_titers.txt", header=T)
ig.2013<-iG[iG$Experiment=="2013", ]
#pulls out data for 2013 experiment, if I wanted only 2014 and 2015 data I could use Experiment!= ..(is not equal)
ig.2013$Titer<-(1/ig.2013$Titer)
#takes the inverse of the titer
ig.2013$Cage<-as.factor(ig.2013$Cage)
ig.2013.c714<-grep("714",ig.2013$Cage, value=F)
ig.2013.Noc714<-ig.2013[-c(ig.2013.c714), ]
#removes the cage 714 data (the cage that cleared the infection)
ig_plot<-ggplot(data=ig.2013.Noc714, aes(x=Treatment_Grp, y=Titer, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.5) +
scale_color_manual(values = rep("black",4)) +
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.4, color="black") +
scale_y_log10(breaks= c(100, 1000, 10000, 100000, 1000000), labels = trans_format("log10", math_format(10^.x)), limits = c(100, 1000000)) +
ylab(" Serum Anti-Toxin A IgG Titer")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 2)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.6, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=12)
,axis.title=element_text(size=13)
,axis.title.x=element_blank()
,legend.position="none"
)
e <- ig_plot + geom_hline(aes(yintercept=400), colour = "gray10", size = 1, linetype=2)
e
six30_VPI<-ig.2013.Noc714[ig.2013.Noc714$Treatment_Grp== '630_VPI', ]
six30_VPI.ig<-six30_VPI$Titer
naive_VPI<-ig.2013.Noc714[ig.2013.Noc714$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.ig<-naive_VPI$Titer
wilcox.test(naive_VPI.ig,six30_VPI.ig)
#data:  naive_VPI.ig and six30_VPI.ig
#W = 0, p-value = 0.008695
####Panel F
### Analysis of Serum Neutralizing Antibodies (vero cell assay) at D40 in the 2013 Experiment
neut_ab<-read.table(file="/Users/Jhansi1/Desktop/Intraspecific_Competition/data/Neutralizing_Titer_2013.txt",  header=TRUE)
neut_ab$Titer<-(1/neut_ab$Avg_NeutralizingTiter)
neut_ab_cage714<-grep("714",neut_ab$Cage, value=F)
neut_ab_NO714<-neut_ab[-c(neut_ab_cage714),  ]
#removes data from cage 714, the cage that cleared
neut_ab.plot<-ggplot(data=neut_ab_NO714, aes(x=Treatment_Grp, y=Titer, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.5) +
scale_color_manual(values = rep("black",4)) +
scale_fill_manual(values = col_A, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.4, color="black") +
scale_y_log10(breaks= c(100, 1000, 10000), labels = trans_format("log10", math_format(10^.x)), limits = c(50, 10000)) +
ylab(" Serum Neutralizing Antibody Titer")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 2)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.6, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=12)
,axis.title=element_text(size=13)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
#removes grey color from back of facet_wrap lable above boxes
,strip.text.x = element_text(size = 15)
)
f<- neut_ab.plot + geom_hline(aes(yintercept=80), colour = "gray10", size = 1, linetype=2) + facet_grid(. ~Toxin)
f
############Plotting as a multipannel figures
library("gridExtra")
a.1<-textGrob("A", hjust=0, vjust=0, gp = gpar(fontface = 2))
b.1<-textGrob("B", hjust=0, vjust=0, gp = gpar(fontface = 2))
c.1<-textGrob("C", hjust=0, vjust=0, gp = gpar(fontface = 2))
d.1<-textGrob("D", hjust=0, vjust=0, gp = gpar(fontface = 2))
e.1<-textGrob("E", hjust=0, vjust=0, gp = gpar(fontface = 2))
f.1<-textGrob("F", hjust=0, vjust=0, gp = gpar(fontface = 2))
lay1 <- rbind(c(1,NA,NA,NA,NA,NA,NA,2,NA,NA,NA,NA,NA,NA,NA,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(5,NA,NA,NA,NA,NA,NA,6,NA,NA,NA,NA,NA,NA,NA,NA),
c(NA,7,7,7,7,7,7,8,8,8,9,9,9,10,10,10),
c(NA,7,7,7,7,7,7,8,8,8,9,9,9,10,10,10),
c(NA,7,7,7,7,7,7,NA,11,11,11,11,11,11,11,NA),
c(NA,7,7,7,7,7,7,NA,11,11,11,11,11,11,11,NA),
c(12,NA,NA,NA,NA,NA,NA,13,NA,NA,NA,NA,NA,NA,NA,NA),
c(NA,14,14,14,14,14,14,NA,15,15,15,15,15,15,15,NA),
c(NA,14,14,14,14,14,14,NA,15,15,15,15,15,15,15,NA),
c(NA,14,14,14,14,14,14,NA,15,15,15,15,15,15,15,NA),
c(NA,14,14,14,14,14,14,NA,15,15,15,15,15,15,15,NA))
grid.arrange(a.1,b.1,a, b,c.1, d.1,c,d1,d2,d3,d4,e.1, f.1, e,f,layout_matrix = lay1)
##the multipannel figure was saved as a pdf and then opened in  adobe illustrator to redo the labels on the x axis and add in the experiment outline
colA
col_A
col_B<-c("630_VPI"= "#F2AD00", "Naive_VPI"= "#00A08A")
#colors used for these figues
col_C<-c("RAG"="black", "WT"="grey")
shape_A<-c("RAG"=22, "WT"=21)
#shapes used for these figues
####Panel A
#% of baseline weight at time of harvest
weight_data<-read.table(file="/Users/Jhansi1/Desktop/Intraspecific_Competition/data/Weights_harvest_Allexperiments.txt", header=TRUE)
#read in the data
weight_df<-as.data.frame(weight_data)
#make it a dataframe
weight_df["percent_of_baseline_weight"]<-NA
#creats a new column that is called percentlost that is filled with NA
weight_df$percent_of_baseline_weight<- (weight_df$Weight_D44/weight_df$Weight_D42*100)
#calculates % of baseline weight from day of challnege with VPI (D42) and adds it to the column percent_of_baseline_weight in the data frame weight_df
weight_df.2014<-weight_df[weight_df$Experiment=="2014", ]
#pull out 2014 experiment data
weight_df.2015<-weight_df[weight_df$Experiment=="2015", ]
#pull out 2015 experiment data
weight_df.14.15<-rbind(weight_df.2014,weight_df.2015)
#combine into one data table
weight_df.14.15a<-weight_df.14.15[weight_df.14.15$Colonization_stat!="cleared", ]
#remove the samples from mice that cleared in 2014 experiment
w.plot.1415.jit<-ggplot(weight_df.14.15a, aes(x=Treatment_Grp, y=percent_of_baseline_weight, shape=Genotype, fill=Treatment_Grp))+
geom_point(position=position_jitterdodge(dodge.width=0.85), size=3.5)  +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.6, color="black", position=position_dodge(0.95)) +
scale_fill_manual(values = col_B)  +
scale_shape_manual(values = shape_A)+
scale_y_continuous(limits = c(80, 115))+
geom_hline(aes(yintercept = 100), colour = "gray10", size = 1, linetype=3) +
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1.5)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.6, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=12)
,axis.title=element_text(size=13)
,axis.title.x=element_blank()
,legend.position="none"
)
a1 = w.plot.1415.jit+ labs(y = expression("% Weight from Basline"))
a1
weight.1415.wt<-weight_df.14.15a[weight_df.14.15a$Genotype=="WT",]
weight.1415.wt.naive<- weight.1415.wt[weight.1415.wt$Treatment_Grp=="Naive_VPI",]
weight.1415.wt.naive.1<- c(weight.1415.wt.naive$percent_of_baseline_weight)
weight.1415.wt.630<- weight.1415.wt[weight.1415.wt$Treatment_Grp=="630_VPI",]
weight.1415.wt.630.1<-c(weight.1415.wt.630$percent_of_baseline_weight)
weight.1415.rag<-weight_df.14.15a[weight_df.14.15a$Genotype=="RAG",]
weight.1415.rag.naive<- weight.1415.rag[weight.1415.rag$Treatment_Grp=="Naive_VPI",]
weight.1415.rag.naive.1<-c(weight.1415.rag.naive$percent_of_baseline_weight)
weight.1415.rag.630<- weight.1415.rag[weight.1415.rag$Treatment_Grp=="630_VPI",]
weight.1415.rag.630.1<-c(weight.1415.rag.630$percent_of_baseline_weight)
wilcox.test(weight.1415.wt.naive.1, weight.1415.wt.630.1)
#  p-value = 5.234e-05
wilcox.test(weight.1415.rag.naive.1, weight.1415.rag.630.1)
# p-value = 0.01008
wilcox.test(weight.1415.wt.naive.1,weight.1415.rag.naive.1)
#W = 125, p-value = 0.8609
wilcox.test(weight.1415.wt.630.1,weight.1415.rag.630.1)
#W = 36, p-value = 0.4967
####Panel B
###Plotting toxin activity following mock or strain VPI 10463 challenge
tox_data<-read.table(file='/Users/Jhansi1/Desktop/Intraspecific_Competition/data/ToxinActivity_Harvest_2013_2014_2015.txt', header=TRUE)
tox_data.2014<-tox_data[tox_data$Experiment=="2014", ]
#pull out 2014 experiment data
tox_data.2015<-tox_data[tox_data$Experiment=="2015", ]
#pull out 2015 experiment data
tox_data.14.15<-rbind(tox_data.2014,tox_data.2015)
#combine into one data table
tox_data.14.15a<-tox_data.14.15[tox_data.14.15$Colonization_stat!="cleared", ]
#remove the samples from mice that cleared in 2014 experiment
toxin_plot.14.15<-ggplot(data=tox_data.14.15a, aes(x=Treatment_Grp, y=Toxin_Activity, fill= factor(Treatment_Grp), colour= factor(Treatment_Grp)))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.5) +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_B) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.8, color="black") +
scale_y_continuous(breaks= c(2,3,4,5,6,7),  limits = c(2, 7)) +
xlab(NULL)+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1.5)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.6, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=12)
,axis.title=element_text(size=13)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
)
b <- toxin_plot.14.15 + geom_hline(aes(yintercept=2.3), colour = "gray10", linetype=2,  size=0.9) + labs(y = expression(paste("Toxin Titer ", Log[10])))
b1<- b +  facet_wrap(~Genotype)
###Wilcox test
toxin_1415rag<-tox_data.14.15a[tox_data.14.15a$Genotype=="RAG",]
toxin_1415wt<-tox_data.14.15a[tox_data.14.15a$Genotype=="WT",]
six30_VPI.rag<-toxin_1415rag[toxin_1415rag$Treatment_Grp== '630_VPI', ]
six30_VPI.rag.toxin_1415<-six30_VPI.rag$Toxin_Activity
naive_VPI.rag<-toxin_1415rag[toxin_1415rag$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.rag.toxin_1415<-naive_VPI.rag$Toxin_Activity
wilcox.test(naive_VPI.rag.toxin_1415,six30_VPI.rag.toxin_1415)
#data:  naive_VPI.rag.toxin_1415 and six30_VPI.rag.toxin_1415
#W = 100.5, p-value = 0.04319
six30_VPI.wt<-toxin_1415wt[toxin_1415wt$Treatment_Grp== '630_VPI', ]
six30_VPI.wt.toxin_1415<-six30_VPI.wt$Toxin_Activity
naive_VPI.wt<-toxin_1415wt[toxin_1415wt$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.wt.toxin_1415<-naive_VPI.wt$Toxin_Activity
wilcox.test(naive_VPI.wt.toxin_1415,six30_VPI.wt.toxin_1415)
#data:  naive_VPI.wt.toxin_1415 and six30_VPI.wt.toxin_1415
#W = 139, p-value = 0.0007306
####Panel C
###Colon Histopatholgy data for 2014 and 2015 experiments
colhist<-read.table(file='/Users/Jhansi1/Desktop/Intraspecific_Competition/data/Colon_histo_harvest_2013_14_15.txt', header=TRUE)
# read in colon Data
colhist_df<-as.data.frame(colhist)
colhist_df.2014<-colhist_df[colhist_df$Experiment=="2014", ]
#pull out 2014 experiment data
colhist_df.2015<-colhist_df[colhist_df$Experiment=="2015", ]
#pull out 2015 experiment data
colhist_df.14.15<-rbind(colhist_df.2014,colhist_df.2015)
#combine into one data table
colhist_df.14.15a<-colhist_df.14.15[colhist_df.14.15$Colonization_stat!="cleared", ]
#remove the samples from mice that cleared in 2014 experiment
##### Ploting colon data from experiment
#edema
co.plot_edema.dot<-ggplot(colhist_df.14.15a, aes(x=Treatment_Grp, y=edema, fill=Treatment_Grp, colour=Treatment_Grp)) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 1.5) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.85, color="black") +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_B, limits = c("630_Mock", "Naive_VPI")) +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4))+
xlab(NULL)+
ylab("Edema")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
)
c1<-co.plot_edema.dot + facet_wrap(~Genotype)
c1
##inflammation
co.plot_inflammation.dot<-ggplot(colhist_df.14.15a, aes(x=Treatment_Grp, y=inflammation, fill=Treatment_Grp, colour=Treatment_Grp)) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.5) +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_B, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.85, color="black") +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4)) +
xlab(NULL)+
ylab("Inflammation")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
)
c2<-co.plot_inflammation.dot + facet_wrap(~Genotype)
c2
##epithelial_damage
co.plot_epithelial_damage.dot<-ggplot(colhist_df.14.15a, aes(x=Treatment_Grp, y=epithelial_damage,  fill=Treatment_Grp, colour=Treatment_Grp)) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=1.5) +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_B, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.85, color="black") +
scale_y_continuous(breaks= c(0, 1, 2, 3, 4),  limits = c(0, 4)) +
xlab(NULL)+
ylab("Epithelial Damage")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=10)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
)
c3<-co.plot_epithelial_damage.dot + facet_wrap(~Genotype)
c3
#This plot shows the sumary score for the colon of the mice at time of harvest.
co.plot_sum.dot<-ggplot(colhist_df.14.15a, aes(x=Treatment_Grp, y=summary_score, fill=Treatment_Grp, colour=Treatment_Grp))+
geom_dotplot(binaxis = "y", stackdir = "center", dotsize=2) +
scale_color_manual(values = rep("black",4))+
scale_fill_manual(values = col_B, limits = c("630_Mock", "Naive_VPI")) +
stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.5, color="black") +
scale_y_continuous(breaks= c(0, 2, 4, 6, 8, 10, 12),  limits = c(0, 12))+
xlab(NULL)+
ylab("Summary Score")+
theme(
panel.background = element_rect(fill = "white", color = "grey75", size = 1.5)
,panel.grid.major = element_line(color = "gray80", size = 0.6)
,panel.grid.major.x = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks = element_line(size = 0.4, colour = "grey75")
,axis.ticks.length = unit(0.2, "cm")
,axis.ticks.x=element_blank()
,axis.text.x=element_blank()
#removes x axis lables because they will be added in manually
,axis.text=element_text(size=11)
,axis.title=element_text(size=10)
,axis.title.x=element_blank()
,legend.position="none"
,strip.background = element_blank()
)
c4<-co.plot_sum.dot + facet_wrap(~Genotype)
c4
###Wilcox test
colhist_1415rag<-colhist_df.14.15a[colhist_df.14.15a$Genotype=="RAG",]
colhist_1415wt<-colhist_df.14.15a[colhist_df.14.15a$Genotype=="WT",]
six30_VPI.rag<-colhist_1415rag[colhist_1415rag$Treatment_Grp== '630_VPI', ]
six30_VPI.rag.hist1415<-six30_VPI.rag$summary_score
naive_VPI.rag<-colhist_1415rag[colhist_1415rag$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.rag.hist1415<-naive_VPI.rag$summary_score
wilcox.test(naive_VPI.rag.hist1415,six30_VPI.rag.hist1415)
#data:  naive_VPI.rag.hist1415 and six30_VPI.rag.hist1415
#W = 104, p-value = 0.004712
six30_VPI.wt<-colhist_1415wt[colhist_1415wt$Treatment_Grp== '630_VPI', ]
six30_VPI.wt.hist1415<-six30_VPI.wt$summary_score
naive_VPI.wt<-colhist_1415wt[colhist_1415wt$Treatment_Grp== 'Naive_VPI', ]
naive_VPI.wt.hist1415<-naive_VPI.wt$summary_score
wilcox.test(naive_VPI.wt.hist1415,six30_VPI.wt.hist1415)
#data:  naive_VPI.wt.hist1415 and six30_VPI.wt.hist1415
#W = 160.5, p-value = 0.0003395
############Plotting as a multipannel figures
library("gridExtra")
a.1<-textGrob("A", hjust=0, vjust=0, gp = gpar(fontface = 2))
b.1<-textGrob("B", hjust=0, vjust=0, gp = gpar(fontface = 2))
c.1<-textGrob("C", hjust=0, vjust=0, gp = gpar(fontface = 2))
lay1 <- rbind(c(1,NA,NA,NA,NA,NA,NA,2,NA,NA,NA,NA,NA,NA,NA,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(NA,3,3,3,3,3,3,NA,4,4,4,4,4,4,4,NA),
c(5,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
c(NA,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8),
c(NA,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8),
c(NA,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8),
c(NA,NA,9,9,9,9,9,9,9,9,9,9,9,9,NA,NA),
c(NA,NA,9,9,9,9,9,9,9,9,9,9,9,9,NA,NA),
c(NA,NA,9,9,9,9,9,9,9,9,9,9,9,9,NA,NA))
grid.arrange(a.1,b.1,a1,b1,c.1,c1,c2,c3,c4,layout_matrix = lay1)
